#!/bin/bash

# Get the directory of the script
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Prompt user to input the project path
read -p "Please enter the project path: " project_path

# Check if the provided path exists
if [ ! -d "$project_path" ]; then
    echo "The provided path does not exist. Exiting..."
    exit 1
fi

# Change to the project directory
cd "$project_path" || { echo "Failed to change directory. Exiting..."; exit 1; }

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "jq is not installed. Installing jq..."
    brew install jq
fi

# Remove the file if it already exists
html_file="${script_dir}/cve_report.html"
if [ -f "$html_file" ]; then
    rm "$html_file"
fi

# Define the API URL and API key
API_URL="https://services.nvd.nist.gov/rest/json/cves/2.0"
API_KEY="4e5e4372-7e5b-4a89-a28b-4e046ef9db3b"

# Get dependencies from package-lock.json
dependencies=$(jq -r '.dependencies' package-lock.json)

# Maximum retry attempts
MAX_RETRIES=100

# Total number of entries to process
TOTAL_ENTRIES=$(jq -r '.dependencies | length' package-lock.json)
CURRENT_INDEX=0

# Initialize HTML content
cat <<EOL >> "$html_file"
<html>
<head>
<title>CVE Risk Report</title>
<style>
    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
</style>
</head>
<body>
EOL

# Run jq command to extract keys and versions from package-lock.json
jq -r '.dependencies | to_entries[] | "\(.key) \(.value.version)"' package-lock.json | while read -r line; do
    # Increment current index
    CURRENT_INDEX=$((CURRENT_INDEX + 1))
    
    # Specify the keyword search parameter
    PACKAGE_NAME=$(echo "$line" | awk '{print $1}')
    PACKAGE_VERSION=$(echo "$line" | awk '{print $2}')
    # For testing
    # PACKAGE_NAME="crypto-js"
    # PACKAGE_VERSION="4.0.0"
    # PACKAGE_NAME="xml2js"
    # PACKAGE_VERSION="0.4.23"

    echo "Fetching data from NVD NIST API (${CURRENT_INDEX}/${TOTAL_ENTRIES}): ${PACKAGE_NAME} ${PACKAGE_VERSION}..."

    retry=0
    while [ $retry -lt $MAX_RETRIES ]; do
        # Construct the full API request URL
        REQUEST_URL="${API_URL}?virtualMatchString=cpe:2.3:*:*:${PACKAGE_NAME}:${PACKAGE_VERSION}:*:*:*"

        # Send a GET request using curl with progress information and API key in header,
        # and save the response to a temporary file
        temp_file=$(mktemp)
        http_code=$(curl -s -o "$temp_file" -w "%{http_code}" -# --header "apiKey: ${API_KEY}" "$REQUEST_URL")

        if [ "$http_code" -eq 503 ]; then
            echo "Received HTTP 503 error. Retrying (attempt ${retry}/${MAX_RETRIES})..."
            rm "$temp_file"
            retry=$((retry + 1))
            sleep 6
        else
            break  # Exit the retry loop if request was successful
        fi
    done

    # Check if maximum retries exceeded
    if [ $retry -eq $MAX_RETRIES ]; then
        echo "Maximum retry attempts (${MAX_RETRIES}) reached. Exiting..."
        exit 1
    fi

    # Extract totalResults from JSON
    total_results=$(jq -r '.totalResults' "$temp_file")
    cve_format=$(jq -r '.format' "$temp_file")
    cve_version=$(jq -r '.version' "$temp_file")
    query_date=$(jq -r '.timestamp' "$temp_file")

    # Start building HTML table for the CVE data
    cat <<EOL >> "$html_file"
<h2>${CURRENT_INDEX}. ${PACKAGE_NAME} ${PACKAGE_VERSION}</h2>
<table>
<tr><th>Package Name</th><td colspan='7'>${PACKAGE_NAME}</td></tr>
<tr><th>Package Version</th><td colspan='7'>${PACKAGE_VERSION}</td></tr>
<tr><th>CVE Format</th><td colspan='7'>${cve_format}</td></tr>
<tr><th>CVE Version</th><td colspan='7'>${cve_version}</td></tr>
<tr><th>Query Date</th><td colspan='7'>${query_date}</td></tr>
<tr><th>CVE ID</th><th>Published Date</th><th>Last Modified Date</th><th>CVSS Base Score</th><th>CVSS Base Severity</th><th>Description</th><th>Handling Instructions</th></tr>
EOL

    # Check if totalResults is 0, skip processing if true
    if [ -z "$total_results" ] || [ "$total_results" -eq 0 ]; then
        echo "<tr><td colspan='7'>No vulnerabilities found for '${PACKAGE_NAME}'.</td></tr>" >> "$html_file"
    else
        # Loop through each vulnerability and append to HTML table
        jq -r '.vulnerabilities[] | 
            "<tr><td>\(.cve.id)</td><td>\(.cve.published)</td><td>\(.cve.lastModified)</td><td>\(.cve.metrics.cvssMetricV31[0].cvssData.baseScore)</td><td>\(.cve.metrics.cvssMetricV31[0].cvssData.baseSeverity)</td><td>\(.cve.descriptions[0].value)</td><td></td></tr>"' "$temp_file" >> "$html_file"
    fi

    # End HTML table for current CVE data
    echo "</table><br>" >> "$html_file"
    rm "$temp_file"
    sleep 6
done

# Close HTML body and document
echo "</body></html>" >> "$html_file"

echo "HTML report saved: $html_file"
