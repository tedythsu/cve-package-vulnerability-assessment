#!/bin/bash

html_file="cve_report.html"

# Remove the file if it already exists
if [ -f "$html_file" ]; then
    rm "$html_file"
fi

# Define the API URL and API key
API_URL="https://services.nvd.nist.gov/rest/json/cves/2.0"
API_KEY="4e5e4372-7e5b-4a89-a28b-4e046ef9db3b"

# Get dependencies from package-lock.json
dependencies=$(jq -r '.dependencies' package-lock.json)

MAX_RETRIES=100

total_entries=$(jq -r '.dependencies | length' package-lock.json)
estimate_time=$(echo "scale=2; $total_entries / 8" | bc)
echo "Total entries: $total_entries, Estimated scan time: $estimate_time minutes"
current_index=0

# Initialize HTML content
cat <<EOL >> "$html_file"
<html>
<head>
<title>CVE Report</title>
<style>
    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
</style>
</head>
<body>
EOL

temp_critical_file="critical_vulnerabilities.txt"

# Run jq command to extract keys and versions from package-lock.json
jq -r '.dependencies | to_entries[] | "\(.key) \(.value.version)"' package-lock.json | while read -r line; do
    current_index=$((current_index + 1))
    package_name=$(echo "$line" | awk '{print $1}')
    package_version=$(echo "$line" | awk '{print $2}')

    echo "Fetching data from CVE API (${current_index}/${total_entries}): ${package_name} ${package_version}..."

    retry=0
    while [ $retry -lt $MAX_RETRIES ]; do
        request_url="${API_URL}?virtualMatchString=cpe:2.3:*:*:${package_name}:${package_version}:*:*:*"

        # Send a GET request using curl with progress information and API key in header,
        # and save the response to a temporary file
        temp_file=$(mktemp)
        http_code=$(curl -s -o "$temp_file" -w "%{http_code}" -# --header "apiKey: ${API_KEY}" "$request_url")

        if [ "$http_code" -eq 503 ]; then
            echo "Received HTTP 503 error. Retrying (attempt ${retry}/${MAX_RETRIES})..."
            rm "$temp_file"
            retry=$((retry + 1))
            sleep 6
        else
            break
        fi
    done

    if [ $retry -eq $MAX_RETRIES ]; then
        echo "Maximum retry attempts (${MAX_RETRIES}) reached. Exiting..."
        exit 1
    fi

    total_results=$(jq -r '.totalResults' "$temp_file")
    cve_format=$(jq -r '.format' "$temp_file")
    cve_version=$(jq -r '.version' "$temp_file")
    query_date=$(jq -r '.timestamp' "$temp_file")

    # Start building HTML table for the CVE data
    cat <<EOL >> "$html_file"
<h2>${current_index}. ${package_name} ${package_version}</h2>
<table>
<tr><th>Package Name</th><td colspan='7'>${package_name}</td></tr>
<tr><th>Package Version</th><td colspan='7'>${package_version}</td></tr>
<tr><th>CVE Format</th><td colspan='7'>${cve_format}</td></tr>
<tr><th>CVE Version</th><td colspan='7'>${cve_version}</td></tr>
<tr><th>Query Date</th><td colspan='7'>${query_date}</td></tr>
<tr><th>CVE ID</th><th>Published Date</th><th>Last Modified Date</th><th>CVSS Base Score</th><th>CVSS Base Severity</th><th>Description</th><th>Handling Instructions</th></tr>
EOL

    if [ -z "$total_results" ] || [ "$total_results" -eq 0 ]; then
        echo "<tr><td colspan='7'>No vulnerabilities found for '${package_name}'.</td></tr>" >> "$html_file"
    else
        # Loop through each vulnerability and append to HTML table
        jq -r '.vulnerabilities[] | 
            "<tr><td>\(.cve.id)</td><td>\(.cve.published)</td><td>\(.cve.lastModified)</td><td>\(.cve.metrics.cvssMetricV31[0].cvssData.baseScore)</td><td>\(.cve.metrics.cvssMetricV31[0].cvssData.baseSeverity)</td><td>\(.cve.descriptions[0].value)</td><td></td></tr>"' "$temp_file" >> "$html_file"

        # Check if any vulnerability has baseSeverity equal to 'CRITICAL'
        critical_vulnerabilities=$(jq -r '.vulnerabilities[] | select(.cve.metrics.cvssMetricV31[0].cvssData.baseSeverity == "CRITICAL") | .cve.id' "$temp_file")

        if [ -n "$critical_vulnerabilities" ]; then
            echo "CRITICAL vulnerabilities found for '${package_name}'."
            echo "$critical_vulnerabilities" | while IFS= read -r cve_id; do
                description=$(jq -r --arg cve_id "$cve_id" '.vulnerabilities[] | select(.cve.id == $cve_id) | .cve.descriptions[0].value' "$temp_file")
                description_short=$(echo "$description" | awk '{print substr($0, 1, 50) "..." }')
                echo "| ${package_name} | [${cve_id}](https://nvd.nist.gov/vuln/detail/${cve_id}) | ${description_short} |" >> "$temp_critical_file"
            done
        fi
    fi

    # End HTML table for current CVE data
    echo "</table><br>" >> "$html_file"
    rm "$temp_file"
    sleep 6
done

# Close HTML body and document
echo "</body></html>" >> "$html_file"

echo "HTML report saved: $html_file"

# Send critical vulnerabilities message if any exist and add header if needed
if [ -s "$temp_critical_file" ]; then
    project_name=$(jq -r '.name' package-lock.json)
    temp_with_header=$(mktemp)
    echo "Dependencies have **CRITICAL** vulnerabilities, please check immediately." > "$temp_with_header"
    echo "## $project_name" >> "$temp_with_header"
    echo "" >> "$temp_with_header"
    echo '| Package Name  | CVE ID           | Description |' >> "$temp_with_header"
    echo '| :------------ |:----------------:|:------------|' >> "$temp_with_header"
    cat "$temp_critical_file" >> "$temp_with_header"

    curl -X POST -d 'payload={"text": "'"$(cat "$temp_with_header" | sed 's/"/\\"/g')"'"}' https://mattermost.cloud.app.mitake.com.tw/hooks/9ymkjcnkxiyd5c4kpgb6f7w3uw
    rm "$temp_critical_file" "$temp_with_header"
fi